apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: fetch-component-information
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
    - name: region
      description: target region for the ibmcloud login operation (if none is found it will default to the toolchain region)
    - name: code-engine-project
      description: name of the Code Engine project for deploying application
    - name: deployment-type
      description: Specifies the type of deployment. Valid values are 'application' and 'job'.
      default: "application"
    - name: component-name
      description: name of the Code Engine component to fetch information
    - name: application-revision
      description: application revision to fetch information from. Default to empty meaning the latest revision of the application will be used
      default: ""
    - name: task-image
      description: image used to execute this task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.46"
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"
  results:
    - name: image-repository
      description: image repository
    - name: image-tag
      description: image tag
    - name: image-pull-secret
      description: name of the image pull secret
    - name: image-pull-secret-kind
      description: user-managed or ce-managed (code-engine managed)
    - name: doi-build-number
      description: Devops Insights build number reference
    - name: doi-logical-app-name
      description: Devops Insights logical application name
  steps:
    - name: fetch-component-information
      image: $(params.task-image)
      env:
        - name: IBMCLOUD_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $(params.pipeline-debug) == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi

        # SETUP BEGIN
        ibmcloud config --check-version false
        #
        # Targetting the region and resource group
        if [ "$(params.region)" ]; then
          # if cluster region is in the 'ibm:yp:<region>' just keep the region part
          IBM_CLOUD_REGION=$(echo "$(params.region)" | awk -F ':' '{print $NF;}')
        else
          IBM_CLOUD_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk -F: '{print $3}')
        fi
        ibmcloud login -a $(params.ibmcloud-api) -r $IBM_CLOUD_REGION --apikey $IBMCLOUD_API_KEY
        ibmcloud target -g "$(params.resource-group)"

        #
        # Make sure that the latest version of Code Engine CLI is installed
        echo "Install the Code Engine plugin"      
        if ! ibmcloud plugin show code-engine >/dev/null 2>&1; then
            ibmcloud plugin install code-engine
        else
            ibmcloud plugin update code-engine --force
        fi

        ibmcloud ce project select --name "$(params.code-engine-project)"

        if [[ -n "$(params.application-revision)" && "$(params.deployment-type)" == "application" ]]; then
          # application revision specified
          ibmcloud ce revision get --name "$(params.application-revision)" --output json > revision_output.json
          IMAGE=$(jq -r '.spec.containers[0].image' revision_output.json)
          IMAGE_PULL_SECRET=$(jq -r '.spec.imagePullSecrets[0].name//empty' revision_output.json)
          CD_DOI_BUILD_NUMBER=$(jq -r '.spec.containers[0].env[] | select(.name=="CD_DOI_BUILD_NUMBER") | .value//empty' revision_output.json)
          CD_DOI_LOGICAL_APP_NAME=$(jq -r '.spec.containers[0].env[] | select(.name=="CD_DOI_LOGICAL_APP_NAME") | .value//empty' revision_output.json)
        elif [[ "$(params.deployment-type)" == "job" ]]; then
          # job
          ibmcloud ce job get --name "$(params.component-name)" --output json > component_output.json
          IMAGE=$(jq -r '.spec.template.containers[0].image' component_output.json)
          IMAGE_PULL_SECRET=$(jq -r '.spec.template.imagePullSecrets[0].name//empty' component_output.json)
          CD_DOI_BUILD_NUMBER=$(jq -r '.spec.template.containers[0].env[] | select(.name=="CD_DOI_BUILD_NUMBER") | .value//empty' component_output.json)
          CD_DOI_LOGICAL_APP_NAME=$(jq -r '.spec.template.containers[0].env[] | select(.name=="CD_DOI_LOGICAL_APP_NAME") | .value//empty' component_output.json)
        else
          # application
          ibmcloud ce application get --name "$(params.component-name)" --output json > component_output.json
          IMAGE=$(jq -r '.spec.template.spec.containers[0].image' component_output.json)
          IMAGE_PULL_SECRET=$(jq -r '.spec.template.spec.imagePullSecrets[0].name//empty' component_output.json)
          CD_DOI_BUILD_NUMBER=$(jq -r '.spec.template.spec.containers[0].env[] | select(.name=="CD_DOI_BUILD_NUMBER") | .value//empty' component_output.json)
          CD_DOI_LOGICAL_APP_NAME=$(jq -r '.spec.template.spec.containers[0].env[] | select(.name=="CD_DOI_LOGICAL_APP_NAME") | .value//empty' component_output.json)
        fi
        if [ -n "$IMAGE_PULL_SECRET" ]; then          
          ibmcloud ce registry get --name "$IMAGE_PULL_SECRET" --output json > secret_output.json
          # look at annotations in the secret to identify if it is a code-component-managed secret
          if jq -e '.metadata.annotations["codeengine.cloud.ibm.com/serviceIdRef"]' secret_output.json >/dev/null 2>&1; then
            IMAGE_PULL_SECRET_KIND="ce-managed"
          else
            IMAGE_PULL_SECRET_KIND="user-managed"
          fi
        fi

        # Record task results
        echo -n "$(echo $IMAGE |  awk -F: '{print $1}')" >$(results.image-repository.path)
        echo -n "$(echo $IMAGE |  awk -F: '{print $2}')" >$(results.image-tag.path)
        echo -n "$IMAGE_PULL_SECRET" >$(results.image-pull-secret.path)
        echo -n "$IMAGE_PULL_SECRET_KIND" >$(results.image-pull-secret-kind.path)
        echo -n "$CD_DOI_BUILD_NUMBER" >$(results.doi-build-number.path)
        echo -n "$CD_DOI_LOGICAL_APP_NAME" >$(results.doi-logical-app-name.path)
